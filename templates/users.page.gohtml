{{template "base" .}}

{{define "content"}}
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="mt-5">
                    <a href="/" class="link-secondary link-offset-1 link-offset-1-hover link-underline link-underline-opacity-0 link-underline-opacity-100-hover">Back to Home page</a>
                    <h1 class="mt-3 text-start">üßë‚Äçüíº users</h1>
                </div>

                <div class="row">
                    <div class="text-start mt-4">
                        {{$res := index .Data "users"}}

                        <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered">
                                <div class="modal-content">
                                    <div class="modal-body">
                                        <form id="editUserForm">
                                            <input type="hidden" id="editID">
                                            <div class="mb-3">
                                                <label for="editUserFirstName" class="form-label"><b>first_name</b></label>
                                                <input type="text" class="form-control form-control-sm" id="editFirstName" required>
                                            </div>
                                            <div class="mb-3">
                                                <label for="editUserLastName" class="form-label"><b>last_name</b></label>
                                                <input type="text" class="form-control form-control-sm" id="editLastName" required>
                                            </div>
                                            <div class="mb-3">
                                                <label for="editUserEmail" class="form-label"><b>email</b></label>
                                                <input type="email" class="form-control form-control-sm" id="editEmail" required>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-sm btn-light" data-bs-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-sm btn-success" onclick="saveUserChanges()">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <table class="table table-hover">
                            <thead>
                            <tr>
                                <th scope="col">üîë id</th>
                                <th scope="col">first_name</th>
                                <th scope="col">last_name</th>
                                <th scope="col">email</th>
                                <th scope="col"></th>
                            </tr>
                            </thead>
                            <tbody>
                            {{ $lastID := 0 }}
                                {{range $res}}
                                <tr>
                                    <td style="width: 5%"><b>{{ .ID }}</b></td>
                                    <td>{{ .FirstName }}</td>
                                    <td>{{ .LastName }}</td>
                                    <td>{{ .Email }}</td>
                                    <td>
                                        <div class="d-flex justify-content-end gap-2">
                                            <button type="button" class="btn btn-sm btn-light edit-btn" data-bs-toggle="modal" data-bs-target="#editUserModal" data-id="{{.ID}}" data-firstName="{{.FirstName}}" data-lastName="{{.LastName}}" data-email="{{.Email}}">‚úèÔ∏è</button>
                                            <button type="button" class="btn btn-sm btn-light delete-btn" data-id="{{.ID}}">‚ùåÔ∏è</button>
                                        </div>
                                    </td>
                                </tr>
                                {{ $lastID = .ID }}
                            {{end}}
                            <tr class="table-light">
                                <form id="createUserForm">
                                    <td>
                                    </td>
                                    <td>
                                        <input type="text" name="firstName" class="form-control form-control-sm" placeholder="first_name" required>
                                    </td>
                                    <td>
                                        <input type="text" name="lastName" class="form-control form-control-sm" placeholder="last_name" required>
                                    </td>
                                    <td>
                                        <input type="email" name="email" class="form-control form-control-sm" placeholder="email" required>
                                    </td>
                                    <td>
                                        <div class="d-flex justify-content-end gap-2">
                                            <button type="submit" class="btn btn-sm btn-success">Create</button>
                                        </div>
                                    </td>
                                </form>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const createForm = document.getElementById('createUserForm');
            createForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const formData = new FormData(createForm);
                const searchParams = new URLSearchParams();

                for (const pair of formData) {
                    searchParams.append(pair[0], pair[1]);
                }

                fetch('/users/create', {
                    method: 'POST',
                    body: searchParams,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(text);
                            });
                        }
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        notie.alert({type: 'error', text: error.message, time: 4});
                    });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const userID = this.getAttribute('data-id');
                    if (confirm('Are you sure you want to delete this user?')) {
                        fetch(`/users/delete/${userID}`, {
                            method: 'DELETE',
                        })
                            .then(response => {
                                if (response.ok) {
                                    location.reload();
                                } else {
                                    alert('There was an error trying to delete the user.');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    }
                });
            });
        });

        var editUserModal = document.getElementById('editUserModal');

        editUserModal.addEventListener('show.bs.modal', function(event) {
            var button = event.relatedTarget;

            var userId = button.getAttribute('data-id');
            var userFirstName = button.getAttribute('data-firstName');
            var userLastName = button.getAttribute('data-lastName');
            var userEmail = button.getAttribute('data-email');

            var modalFirstNameInput = editUserModal.querySelector('#editFirstName');
            var modalLastNameInput = editUserModal.querySelector('#editLastName');
            var modalEmailInput = editUserModal.querySelector('#editEmail');
            var modalUserIdInput = editUserModal.querySelector('#editID');

            modalFirstNameInput.value = userFirstName;
            modalLastNameInput.value = userLastName;
            modalEmailInput.value = userEmail;
            modalUserIdInput.value = userId;
        });

        function saveUserChanges() {
            var form = document.getElementById('editUserForm');

            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            var userId = document.getElementById('editID').value;
            var firstName = document.getElementById('editFirstName').value;
            var lastName = document.getElementById('editLastName').value;
            var email = document.getElementById('editEmail').value;

            fetch('/users/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `id=${userId}&firstName=${encodeURIComponent(firstName)}&lastName=${encodeURIComponent(lastName)}&email=${encodeURIComponent(email)}`
            })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            throw new Error(text);
                        });
                    }
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    notie.alert({type: 'error', text: error.message, time: 4});
                });
        }
    </script>
{{end}}
